package com.gb.crm.workbench.mapper;

import com.gb.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    int updateByPrimaryKey(Activity record);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 12:23:03 CST 2022
     */
    int insertActivity(Activity activity);
    /**
     * 根据条件和页数查询
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map map);

    /**
     * 根据条件查询市场活动的总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据ids批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String [] ids);

    /**
     * 根据id查询市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 修改市场活动信息
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivity();


    /**
     * 根据id查询多条市场活动信息
     * @param id
     * @return
     */
    List<Activity> selectActivitysById(String [] id);

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);


    /**
     * 根据id查询市场活动的明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询该线索相关联的市场活动的明细信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据ids查询市场活动的明细信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据name模糊查询市场活动，并且查询那些跟clueId关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);

    /**
     * 根据name模糊查询市场活动
     * @return
     */
    List<Activity> selectActivityForDetailByName(String name);

    /**
     * 查询与联系人相关的市场活动
     * @param contactsId
     * @return
     */
    List<Activity> selectActivityByContactsId(String contactsId);

    /**
     * 根据name模糊查询市场活动，并且把已经跟Contacts关联过的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameContactsId(Map<String,Object> map);
}
